Angular Js Training
installing node js
Install Node Js.
To get Node.js, go to nodejs.org.


Step 1: Install the Angular CLI
npm install -g @angular/cli

Step 2: Create a workspace and initial application
ng new my-app

Step 3: Serve the application
cd my-app
ng serve --open

Step 4: 

npm install --save bootstrap@3

Then open angular.json file
and under Styles heading add the following line
"styles": [
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "src/styles.css"
            ],



The ng serve command launches the server, watches your files, and rebuilds the app as you make changes to those files.

The --open (or just -o) option automatically opens your browser to http://localhost:4200/



Open app.component.ts.

Change the title property from 'my-app' to 'My First Angular App'.

content_copy
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'My First Angular App!';
}


h1 {
  color: #369;
  font-family: Arial, Helvetica, sans-serif;
  font-size: 250%;
}

in order to create a new component use the following command 

ng g c servers

Where servers is name of the new component.



Files we need to work on and change them in order to make it work for us.
-------------------------------------------------------------------------
1- in app.component.ts file
add the following in export class Appcomponent method

export class AppComponent {
  
  name = '';
}

2- in app.component.html file 
<input type="text" [(ngModel)]="name">
  <p>{{ name }}</p>
  
  ngModel will bind it with the file in app.module.ts
  
 3- in app.module.ts file under @NgModule add imports FormsModule and then on top import { FormsModule }
 
 import { FormsModule } from "@angular/forms";
 ---------------------------------------------
 
 @NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    FormsModule
	-----------
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

What is TypeScritp:

TypeScritp is basically a super set to Java scripts it offers more features than vanila js like 
Types, Classes, interfaces, and above all type script which gives a very strong typing.
you define in TypeScritp that a vareiable is a number or a string or something else.

It allows you to write much more robust code which gets checked when you write it and not at the time when you run it. A great enhancement.
However TypeScritp doesn't run in the browser, so it's compiled to JavaScript and this compilation is handled by CLI, 
one of the reasons we need CLI which is a project management tool.

This compilation is really fast and in the browser JavaScript is going to run, we aren't writing the App in Java Script though becuase what was technically possible that wouldn't be much fun.
Lot of the features really only exist in type script and angular is meant to be work with type script.


In order to style better we need to download Bootstrap which we have already. Once we download we need to give path in angular-cli.json file to get to
bootstrap folder that holds all the corresponding styling files.

in Angular-cli.json file go to Styles and enter the following file path.
"styles": [
        "../node_modules/bootstrap/dist/css/bootstrap.min.css",
        "styles.css"
      ],

And you can check it by clicking F12 and under header section go to styles and you will be able to see the bootstrap link

How CLI loads the Page?
-----------------------

In the Main.ts file we impot AppModule from app.module file and boostrap also refer to AppModule. As follows.

import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

if (environment.production) {
  enableProdMode();
}

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.log(err));
  ------------------------------------------------------------------------------------
  
  Components and Data Binding Deep Dive 
--------------------------------------------------------------------------------------

1- I downloaded the code from Maximillan's resources 
2- create two new components using 

	i- ng g c cockpit --spec false
	ii- ng g c server-element --spec false 
  






